generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String            @id @default(cuid())
  email                  String            @unique
  password               String
  firstName              String
  lastName               String
  role                   String            @default("DEVELOPER")
  status                 String            @default("PENDING_VERIFICATION")
  skills                 String[]          @default([])
  availability           String?
  preferences            String?
  profilePhoto           String?
  refreshToken           String?
  lastLoginAt            DateTime?
  emailVerificationToken String?
  emailVerifiedAt        DateTime?
  passwordResetToken     String?
  passwordResetExpires   DateTime?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  activities             Activity[]
  attachments            Attachment[]
  auditLogs              AuditLog[]
  comments               Comment[]
  projects               Project[]         @relation("ProjectLead")
  requirements           Requirement[]     @relation("RequirementAuthor")
  assignedTasks          Task[]            @relation("TaskAssignee")
  reportedTasks          Task[]            @relation("TaskReporter")
  ownedWorkspaces        Workspace[]       @relation("WorkspaceOwner")
  workspaceMembers       WorkspaceMember[]

  @@index([email])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  entity    String
  entityId  String?
  changes   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entity, entityId])
}

model Workspace {
  id          String            @id @default(cuid())
  name        String
  slug        String            @unique
  description String?
  logo        String?
  status      String            @default("ACTIVE")
  plan        String            @default("FREE")
  ownerId     String
  settings    String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  projects    Project[]
  spaces      Space[]
  owner       User              @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  invites     WorkspaceInvite[]
  members     WorkspaceMember[]

  @@index([slug])
  @@index([ownerId])
}

model WorkspaceMember {
  id           String    @id @default(cuid())
  workspaceId  String
  userId       String
  permission   String    @default("READ")
  joinedAt     DateTime  @default(now())
  lastActiveAt DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@index([workspaceId])
  @@index([userId])
}

model WorkspaceInvite {
  id          String    @id @default(cuid())
  workspaceId String
  email       String
  permission  String    @default("READ")
  invitedBy   String
  status      String    @default("PENDING")
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([email])
}

model Space {
  id          String    @id @default(cuid())
  name        String
  description String?
  color       String?
  icon        String?
  workspaceId String
  settings    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  folders     Folder[]
  projects    Project[]
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Folder {
  id          String    @id @default(cuid())
  name        String
  description String?
  color       String?
  spaceId     String
  parentId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  parent      Folder?   @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    Folder[]  @relation("FolderHierarchy")
  space       Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  projects    Project[]

  @@index([spaceId])
  @@index([parentId])
}

model Project {
  id           String        @id @default(cuid())
  name         String
  key          String
  description  String?
  status       String        @default("PLANNING")
  priority     String        @default("MEDIUM")
  startDate    DateTime?
  endDate      DateTime?
  workspaceId  String
  spaceId      String?
  folderId     String?
  leadId       String?
  settings     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  customFields CustomField[]
  lists        List[]
  personas     Persona[]
  folder       Folder?       @relation(fields: [folderId], references: [id])
  lead         User?         @relation("ProjectLead", fields: [leadId], references: [id])
  space        Space?        @relation(fields: [spaceId], references: [id])
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  requirements Requirement[]
  sprints      Sprint[]
  tasks        Task[]

  @@unique([workspaceId, key])
  @@index([workspaceId])
  @@index([spaceId])
  @@index([folderId])
  @@index([leadId])
}

model List {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?
  position    Int      @default(0)
  projectId   String
  statuses    String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@index([projectId])
}

model Task {
  id             String           @id @default(cuid())
  number         Int
  title          String
  description    String?
  status         String           @default("TODO")
  priority       String           @default("MEDIUM")
  type           String           @default("TASK")
  projectId      String
  listId         String?
  parentId       String?
  assigneeId     String?
  reporterId     String
  dueDate        DateTime?
  startDate      DateTime?
  estimatedHours Float?
  actualHours    Float?
  storyPoints    Int?
  tags           String[]         @default([])
  customFields   String?
  position       Int              @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  activities     Activity[]
  attachments    Attachment[]
  checklists     Checklist[]
  comments       Comment[]
  assignee       User?            @relation("TaskAssignee", fields: [assigneeId], references: [id])
  list           List?            @relation(fields: [listId], references: [id])
  parent         Task?            @relation("TaskHierarchy", fields: [parentId], references: [id])
  children       Task[]           @relation("TaskHierarchy")
  project        Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reporter       User             @relation("TaskReporter", fields: [reporterId], references: [id])
  dependencies   TaskDependency[] @relation("DependentTask")
  dependents     TaskDependency[] @relation("DependsOnTask")
  linkedItems    TaskLink[]       @relation("SourceTask")
  linkedToItems  TaskLink[]       @relation("TargetTask")
  timeTracking   TimeTracking[]
  userStories    UserStory[]

  @@unique([projectId, number])
  @@index([projectId])
  @@index([listId])
  @@index([parentId])
  @@index([assigneeId])
  @@index([reporterId])
  @@index([status])
}

model TaskDependency {
  id          String   @id @default(cuid())
  dependentId String
  dependsOnId String
  type        String   @default("FINISH_TO_START")
  createdAt   DateTime @default(now())
  dependent   Task     @relation("DependentTask", fields: [dependentId], references: [id], onDelete: Cascade)
  dependsOn   Task     @relation("DependsOnTask", fields: [dependsOnId], references: [id], onDelete: Cascade)

  @@unique([dependentId, dependsOnId])
  @@index([dependentId])
  @@index([dependsOnId])
}

model Requirement {
  id                 String               @id @default(cuid())
  code               String
  title              String
  description        String
  type               String               @default("FUNCTIONAL")
  status             String               @default("DRAFT")
  priority           String               @default("SHOULD_HAVE")
  projectId          String
  authorId           String
  version            Int                  @default(1)
  qualityScore       Float?
  acceptanceCriteria String[]             @default([])
  dependencies       String[]             @default([])
  tags               String[]             @default([])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  testCases          String[]             @default([])
  attachments        Attachment[]
  author             User                 @relation("RequirementAuthor", fields: [authorId], references: [id])
  project            Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  history            RequirementHistory[]
  linkedTasks        TaskLink[]

  @@unique([projectId, code])
  @@index([projectId])
  @@index([authorId])
  @@index([type])
  @@index([status])
}

model RequirementHistory {
  id            String      @id @default(cuid())
  requirementId String
  version       Int
  changes       String
  changedBy     String
  createdAt     DateTime    @default(now())
  requirement   Requirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)

  @@index([requirementId])
}

model Persona {
  id                   String      @id @default(cuid())
  name                 String
  avatar               String?
  role                 String
  age                  Int?
  location             String?
  bio                  String
  goals                String[]    @default([])
  frustrations         String[]    @default([])
  motivations          String[]    @default([])
  technicalProficiency String      @default("MEDIUM")
  projectId            String
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  project              Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userFlows            UserFlow[]
  userStories          UserStory[]

  @@index([projectId])
}

model UserStory {
  id                 String   @id @default(cuid())
  title              String
  asA                String
  iWant              String
  soThat             String
  acceptanceCriteria String[] @default([])
  priority           String   @default("MEDIUM")
  storyPoints        Int?
  personaId          String?
  epicId             String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  epic               Task?    @relation(fields: [epicId], references: [id])
  persona            Persona? @relation(fields: [personaId], references: [id])

  @@index([personaId])
  @@index([epicId])
}

model UserFlow {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   @default("USER_JOURNEY")
  personaId   String?
  flowData    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  persona     Persona? @relation(fields: [personaId], references: [id])

  @@index([personaId])
}

model Sprint {
  id        String   @id @default(cuid())
  name      String
  goal      String?
  projectId String
  startDate DateTime
  endDate   DateTime
  status    String   @default("PLANNED")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  authorId  String
  taskId    String?
  parentId  String?
  mentions  String[]  @default([])
  reactions String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  task      Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([authorId])
  @@index([parentId])
}

model Activity {
  id        String   @id @default(cuid())
  type      String
  taskId    String
  userId    String
  changes   String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([taskId])
  @@index([userId])
}

model Attachment {
  id            String       @id @default(cuid())
  filename      String
  filesize      Int
  mimetype      String
  url           String
  thumbnailUrl  String?
  uploadedById  String
  taskId        String?
  requirementId String?
  createdAt     DateTime     @default(now())
  requirement   Requirement? @relation(fields: [requirementId], references: [id], onDelete: Cascade)
  task          Task?        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploadedBy    User         @relation(fields: [uploadedById], references: [id])

  @@index([taskId])
  @@index([requirementId])
  @@index([uploadedById])
}

model Checklist {
  id        String          @id @default(cuid())
  title     String
  taskId    String
  position  Int             @default(0)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  task      Task            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  items     ChecklistItem[]

  @@index([taskId])
}

model ChecklistItem {
  id          String    @id @default(cuid())
  content     String
  isCompleted Boolean   @default(false)
  checklistId String
  position    Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  @@index([checklistId])
}

model TimeTracking {
  id          String    @id @default(cuid())
  taskId      String
  userId      String
  startTime   DateTime
  endTime     DateTime?
  duration    Int?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
}

model TaskLink {
  id            String       @id @default(cuid())
  sourceTaskId  String
  targetTaskId  String?
  requirementId String?
  linkType      String
  createdAt     DateTime     @default(now())
  requirement   Requirement? @relation(fields: [requirementId], references: [id], onDelete: Cascade)
  sourceTask    Task         @relation("SourceTask", fields: [sourceTaskId], references: [id], onDelete: Cascade)
  targetTask    Task?        @relation("TargetTask", fields: [targetTaskId], references: [id], onDelete: Cascade)

  @@index([sourceTaskId])
  @@index([targetTaskId])
  @@index([requirementId])
}

model CustomField {
  id         String   @id @default(cuid())
  name       String
  type       String
  options    String[] @default([])
  isRequired Boolean  @default(false)
  projectId  String
  entityType String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([entityType])
}
